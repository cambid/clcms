You have some influence on the way clcms processes the content tree. The
main method to modify default options on the fly is creating a .setup file
in the top directory where you want the modifications. The other way is by
putting certain extensions in the file names. See
[[../Dirs_and_files/index.html][Dirs and Files]] for more information on
file types and names.

You can get the values for default options by calling
=clcms.py -c=

This will print the following lines (and more if there are .setup files in
the current directory):

_NO_WIKI_
<pre>
ignore_masks = \.\\*,DEADJOE
page_file_option_delimiter = .*(\..*?)\..*
page_file_name = .*(\.page)
show_item_title_date = no
show_item_title = yes
wiki_parse = yes
macro_file_name = .*\.macro
setup_file_name = .*\.setup
menu_item1_end = menu_item_end.inc
menu_item1_start = menu_item_start.inc
menu_end_files = menu_end.inc
menu_start_files = menu_start.inc
menu_depth = 1
show_submenu = yes
show_menu = yes
resource_dir = .
content_dir = .
favicon = ./favicon.ico
footer_files = footer.inc
header_files = header.inc
style_sheet = default.css
out_dir = out
in_dir = in
root_dir = .
</pre>
_NO_WIKI_END_

*Note*
These options are most likely to change, especially the more complicated ones.

For all options with a plural name, you can enter a comma-separated list of
values.

They have the following meaning:
   * *ignore_masks*

     List of regular expressions. File names that match these are completely
     skipped by clcms.

   * *page_file_name*

     Specifies the extension of .page files. (default, of course, is .page)

   * *show_item_title_date*

     Add the date of the file when prepending a .page part with a title

   * *show_item_title*

     Prepend .pages files with their title.

   * *wiki_parse*

     Put the .page files through the wiki engine

   * *macro_file_name*

     Specifies the extension of .macro files.

   * *setup_file_name*

     Specifies the extension of .setup files

   * *menu_item1_end*

     This file is included after every first level menu item in the main menu.
     (if you have a menu with depth more than 1, you can add menu_item2_end etc.)

   * *menu_item1_start*

     This file is included before every first level menu item in the main menu.
     (if you have a menu with depth more than 1, you can add menu_item2_start etc.)

   * *menu_end_files*
     These files will be included after the menu in the _MENU_ macro
     
   * *menu_start_files*

     These files will be included before the menu in the _MENU_ macro

   * *menu_depth*

     Specifies how many levels (subdirectories) the menu generator must parse.

   * *show_submenu*

     Show the submenu if there is more than 1 .page part.

   * *show_menu*

     Show the menu

   * *footer_files*

     These files will be included at the end of generated html files

   * *header_files*

     These files will be included at the beginning of generated html files

   * *style_sheet*

     Specifies the name and location of the style sheet (relative to the in_dir)

   * *out_dir*

     Specifies where the output should be copied to

   * *in_dir*

     Specifies the directory where the content input resides.


